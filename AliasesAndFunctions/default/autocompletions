#!/bin/bash

# shellcheck disable=1090,1091,2015,2155

_find_compose_file() {
	local dir="$PWD"
	while [[ "$dir" != "/" ]]; do
		if [[ -f "$dir/docker-compose.yml" ]]; then
			echo "$dir/docker-compose.yml"
			return 0
		elif [[ -f "$dir/docker-compose.yaml" ]]; then
			echo "$dir/docker-compose.yaml"
			return 0
		fi
		dir="$(dirname "$dir")"
	done

	if command -v git &>/dev/null; then
		local gitroot
		gitroot="$(git rev-parse --show-toplevel 2>/dev/null)"
		if [[ -n "$gitroot" && -d "$gitroot" ]]; then
			if [[ -f "$gitroot/docker-compose.yml" ]]; then
				echo "$gitroot/docker-compose.yml"
				return 0
			elif [[ -f "$gitroot/docker-compose.yaml" ]]; then
				echo "$gitroot/docker-compose.yaml"
				return 0
			fi
		fi
	fi

	return 1
}

_docker_compose_completion() {
	local compose_file="$(_find_compose_file)" || return 0

	for item in $(docker compose -f "$compose_file" config --services 2>/dev/null | grep -P "^${COMP_WORDS[${COMP_CWORD}]}"); do
		COMPREPLY=("${COMPREPLY[@]}" "${item}")
	done
}

complete -F _docker_compose_completion dcdu

_docker_container_get_available_users() {
	docker exec -it "${1}" sh -c "grep -v '/nologin\|/sync\|/false' /etc/passwd" | cut -d':' -f1 | sort
}

_docker_containers_completion() {
	if [[ ${COMP_CWORD} -eq 1 ]]; then
		for item in $(docker ps --format "{{.Names}}" | grep -P "^${COMP_WORDS[${COMP_CWORD}]}"); do
			COMPREPLY=("${COMPREPLY[@]}" "${item}")
		done
	elif [[ ${COMP_CWORD} -eq 2 && ${COMP_WORDS[0]} == "de" ]]; then
		local available_users=$(_docker_container_get_available_users "${COMP_WORDS[1]}")
		for user in $(echo "${available_users}" | tr -d '\015' | grep -P "^${COMP_WORDS[${COMP_CWORD}]}"); do
			COMPREPLY+=("${user}")
		done
	fi
}

[[ -n $(command -v docker) ]] && complete -F _docker_containers_completion de dl

_k9s_context_completion() {
	if [[ ${COMP_CWORD} -eq 1 || ${COMP_CWORD} -eq 3 ]]; then
		for item in $(echo -e "--context\n--namespace\n--help" | grep -P "^${COMP_WORDS[${COMP_CWORD}]}"); do
			COMPREPLY=("${COMPREPLY[@]}" "${item}")
		done
	else
		if [[ ${COMP_WORDS[$((COMP_CWORD - 1))]} == "--context" ]]; then
			local available_contexts=$(kubectl config get-contexts -o name)
			for context in $(echo "${available_contexts}" | tr -d '\015' | grep -P "^${COMP_WORDS[${COMP_CWORD}]}"); do
				COMPREPLY+=("${context}")
			done
		elif [[ ${COMP_WORDS[$((COMP_CWORD - 1))]} == "--namespace" ]]; then
			local context_argument=""
			[[ ${COMP_WORDS[1]} == "--context" ]] && context_argument="--context ${COMP_WORDS[2]}"

			# shellcheck disable=2086
			for item in $(kubectl get ns --no-headers -o custom-columns=":metadata.name" ${context_argument} | grep -P "^${COMP_WORDS[${COMP_CWORD}]}"); do
				COMPREPLY=("${COMPREPLY[@]}" "${item}")
			done
		fi
	fi
}

[[ -n $(command -v k9s) ]] && complete -F _k9s_context_completion k9s

_kubernetes_pod_completion() {
	if [[ ${COMP_CWORD} -eq 1 ]]; then
		for item in $(kubectl get ns --no-headers -o custom-columns=":metadata.name" | grep -P "^${COMP_WORDS[${COMP_CWORD}]}"); do
			COMPREPLY=("${COMPREPLY[@]}" "${item}")
		done
	elif [[ ${COMP_CWORD} -eq 2 ]]; then
		namespace=${COMP_WORDS[1]}
		available_pods=$(kubectl get pod -n "${namespace}" -o custom-columns=":metadata.name" --no-headers)
		for pod in $(echo "${available_pods}" | tr -d '\015' | grep -P "^${COMP_WORDS[${COMP_CWORD}]}"); do
			COMPREPLY+=("${pod}")
		done
	fi
}

[[ -n $(command -v kubectl) ]] && complete -F _kubernetes_pod_completion ke kl

[[ -f /usr/local/etc/bash_completion ]] && . /usr/local/etc/bash_completion
if which brew >/dev/null 2>/dev/null; then
	[[ -f "$(brew --prefix)"/etc/bash_completion.d/docker ]] && source "$(brew --prefix)"/etc/bash_completion.d/docker
	[[ -f "$(brew --prefix)"/etc/bash_completion.d/docker-compose ]] && source "$(brew --prefix)"/etc/bash_completion.d/docker-compose
fi
[[ -f ~/.podman-completion ]] && source ~/.podman-completion
[[ -f ~/.git-completion.bash ]] && source ~/.git-completion.bash

__ssh_parse_hosts() {
	awk '
    /^[[:space:]]*#/            { next }    # Kommentar
    /^[[:space:]]*Host[[:space:]]+/ {
        for (i = 2; i <= NF; i++) {
            if ($i !~ /[*?]/)               # exakt → unverändert
                print $i
            else if ($i ~ /^[^*?]+[*]$/) {  # genau ein * ganz am Ende
                sub(/\*$/, "", $i)          # Stern entfernen (test* → test)
                print $i
            }
        }
    }' "$1" 2>/dev/null
}

__ssh_collect_cfg_files() {
	local cfg="$1"
	declare -A seen
	local queue=("$cfg")

	while ((${#queue[@]})); do
		local f="${queue[0]}"
		queue=("${queue[@]:1}")
		[[ -r $f && -f $f && -z ${seen[$f]} ]] || continue
		seen[$f]=1

		while IFS= read -r inc; do
			inc="${inc/#\~/$HOME}"
			for path in $inc; do
				[[ -e $path ]] && queue+=("$path")
			done
		done < <(awk '
            /^[[:space:]]*Include[[:space:]]+/ {
                for (i = 2; i <= NF; i++) print $i
            }' "$f")
	done

	printf '%s\n' "${!seen[@]}"
}

__ssh_list_hosts() {
	local main_cfg="$HOME/.ssh/config"
	[[ -f $main_cfg ]] || return

	declare -A hosts
	local f
	while read -r f; do
		while read -r h; do hosts[$h]=1; done < <(__ssh_parse_hosts "$f")
	done < <(__ssh_collect_cfg_files "$main_cfg")

	printf '%s\n' "${!hosts[@]}"
}

_ssh_complete_with_includes() {
	local cur
	if declare -F _init_completion &>/dev/null; then
		_init_completion || return
	else
		cur=${COMP_WORDS[COMP_CWORD]}
	fi

	mapfile -t COMPREPLY < <(compgen -W "$(__ssh_list_hosts)" -- "$cur")
}

complete -F _ssh_complete_with_includes ssh scp sftp
